from datetime import datetime
from rest_framework import serializers

from customer.models import AccountTypes, Accounts, Customer, Transactions
from .models import Staff, Tickets


class StaffSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Staff
        fields = ('user', 'department', 'first_name', 'last_name', 'title', 'birth_date', 'gender')



class StaffApproveSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Tickets
        fields = ("ticket_id",)
    
    def __init__(self, user_id, **kwargs):
        self.user_id = user_id
        super().__init__(**kwargs)

    def create(self, validated_data):
        ticket = Tickets.objects.get(**validated_data)
        ticket.status = Tickets.TicketStatus.APPROVED
        ticket.closed_by = Staff.objects.get(user = self.user_id)
        ticket.closed_date = datetime.now()
        ticket.save()
        self.make_account(ticket.opened_by, ticket.account_type_id)
        return ticket
    
    def make_account(self, user_model, account_type):
        account = Accounts.objects.create(user_id=user_model, type_id=account_type, status=Accounts.AccountStatus.ACTIVE)
        account.save()
        return account


class StaffRejectSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Tickets
        fields = ("ticket_id",)
    
    def __init__(self, user_id, **kwargs):
        self.user_id = user_id
        super().__init__(**kwargs)

    def create(self, validated_data):
        ticket = Tickets.objects.get(**validated_data)
        ticket.status = Tickets.TicketStatus.REJECTED
        ticket.closed_by = Staff.objects.get(user = self.user_id)
        ticket.closed_date = datetime.now()
        ticket.save()
        return ticket


class GetOpenTicketsSerializer(serializers.Serializer):
    
    def __init__(self):
        self.all_open_tickets = Tickets.objects.filter(status=Tickets.TicketStatus.OPEN).order_by("opened_date").values()

    def get_open_tickets_list(self):
        return list(self.all_open_tickets)


class GetClosedTicketsSerializer(serializers.Serializer):
    
    def __init__(self, user_id):
        self.user_id = Staff.objects.get(user = user_id)
        self.closed_tickets = Tickets.objects.filter(closed_by=self.user_id).exclude(status=Tickets.TicketStatus.OPEN).order_by("closed_date").reverse().values()

    def get_closed_tickets_list(self):
        return list(self.closed_tickets)


class GetBalanceSerializer(serializers.Serializer):
    
    def __init__(self, user_id):
        self.user_id = Customer.objects.get(user = user_id)
        self.account = Accounts.objects.filter(user_id=self.user_id, status=Tickets.TicketStatus.OPEN).values("type_id", "balance")

    def get_balance(self):
        return list(self.account)


class TransferSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Transactions
        fields = ("recipient_id", "description", "amount")
        # TODO: test if the recipient_id foreign key can be autogenerated from here
    
    def __init__(self, user_id, **kwargs):
        self.user_id = Customer.objects.get(user=self.user_id)
        super().__init__(**kwargs)

    def create(self, validated_data):
        transaction = Transactions.objects.create(**validated_data)
        transaction.sender_id = Accounts.objects.get(user_id=self.user_id)
        
        sender = transaction.sender_id
        sender.balance = sender.balance - transaction.amount

        receiver = transaction.recipient_id
        receiver.balance = receiver.balance - transaction.amount
       
        transaction.save()
        sender.save()
        receiver.save()

        return transaction


class DepositSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Transactions
        fields = ("amount")
    
    def __init__(self, user_id, **kwargs):
        self.user_id = Customer.objects.get(user=user_id)
        super().__init__(**kwargs)

    def create(self, validated_data):
        transaction = Transactions.objects.create(**validated_data)
        transaction.description = "Deposit"

        # TODO: figure out how to handle atm account
        sender = Accounts.objects.get()
        transaction.sender_id = sender

        receiver = Accounts.objects.get(user=self.user_id)
        transaction.recipient_id = receiver
        receiver.balance = receiver.balance + transaction.amount

        transaction.save()
        receiver.save()
        return transaction


class WithdrawSerializer(serializers.ModelSerializer):
    user = serializers.Field(required=False)

    class Meta:
        model = Transactions
        fields = ("amount")
    
    def __init__(self, user_id, **kwargs):
        self.user_id = Customer.objects.get(user=user_id)
        super().__init__(**kwargs)

    def create(self, validated_data):
        transaction = Transactions.objects.create(**validated_data)
        transaction.description = "Withdrawal"

        # TODO: figure out how to handle atm account
        receiver = Accounts.objects.get()
        transaction.recipient_id = receiver

        sender = Accounts.objects.get(user=self.user_id)
        transaction.sender_id = sender
        receiver.balance = receiver.balance - transaction.amount

        transaction.save()
        receiver.save()
        return transaction
    


    


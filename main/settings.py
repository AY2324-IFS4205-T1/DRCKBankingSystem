"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os, sys
from pathlib import Path
from datetime import timedelta
import sys
from rest_framework.settings import api_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG") == "True"

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    ALLOWED_HOSTS = ['.localhost', '127.0.0.1', '[::1]']
else:
    CORS_ALLOWED_ORIGINS = [
        "https://ifs4205-23s1-1-1-i.comp.nus.edu.sg:3000"
    ]
    ALLOWED_HOSTS = ['ifs4205-23s1-1-2-i.comp.nus.edu.sg']
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    X_FRAME_OPTIONS = "DENY"
    SECURE_REFERRER_POLICY = "same-origin"
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True


# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'knox',
    'corsheaders',
    'user',
    'customer',
    'staff',
    'log',
    'anonymisation',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if DEBUG:
    DATABASES = { 
        'default': { 
            'ENGINE': 'django.db.backends.postgresql_psycopg2', 
            'OPTIONS': { 
                'options': '-c search_path=django' 
            }, 
            'NAME': os.environ["POSTGRES_DBNAME_AUTH"], 
            'USER': os.environ["POSTGRES_USER_AUTH"], 
            'PASSWORD': os.environ["POSTGRES_PASSWORD_AUTH"], 
            'HOST': os.environ["POSTGRES_HOST_AUTH"], 
            'PORT': os.environ["POSTGRES_PORT_AUTH"], 
            'TEST': { 
                'NAME': 'test_drck_banking', 
            }
        }, 
    }  
else:
    if 'migrate' in sys.argv or 'makemigrations' in sys.argv:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'OPTIONS': {
                    'options': '-c search_path=django',
                    'sslmode': 'verify-ca',
                    'sslcert': os.environ["CLIENT_CERT"],
                    'sslkey': os.environ["CLIENT_KEY"],
                    'sslrootcert': os.environ["CA_CERT"],    
                },
                'NAME': os.environ["POSTGRES_DBNAME_AUTH"],
                'USER': os.environ["POSTGRES_USERMIGRATE_AUTH"],
                'PASSWORD': os.environ["POSTGRES_USERMIGRATE_PASSWORD_AUTH"],
                'HOST': os.environ["POSTGRES_HOST_AUTH"],
                'PORT': os.environ["POSTGRES_PORT_AUTH"],
                'TEST': {
                    'NAME': 'test_drck_banking',
                }
            },
        }
        print("Using database config for migrations")
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'OPTIONS': {
                    'options': '-c search_path=django',
                    'sslmode': 'verify-ca',
                    'sslcert': os.environ["CLIENT_CERT"],
                    'sslkey': os.environ["CLIENT_KEY"],
                    'sslrootcert': os.environ["CA_CERT"],    
                },
                'NAME': os.environ["POSTGRES_DBNAME_AUTH"],
                'USER': os.environ["POSTGRES_USER_AUTH"],
                'PASSWORD': os.environ["POSTGRES_PASSWORD_AUTH"],
                'HOST': os.environ["POSTGRES_HOST_AUTH"],
                'PORT': os.environ["POSTGRES_PORT_AUTH"],
                'TEST': {
                    'NAME': 'test_drck_banking',
                }
            },
        }
        print("Using database config for application")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        "OPTIONS": {
            "max_similarity": 0.7,
            "user_attributes": ["username", "email"]
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        "OPTIONS": {
            "min_length": 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        "NAME": "user.validations.MaximumLengthValidator",
        "OPTIONS": {
            "max_length": 64,
        }
    },
    {
        "NAME": "user.validations.UppercaseValidator",
        "OPTIONS": {
            "min_number": 2,
        }
    },
    {
        "NAME": "user.validations.LowercaseValidator",
        "OPTIONS": {
            "min_number": 2,
        }
    },
    {
        "NAME": "user.validations.NumericValidator",
        "OPTIONS": {
            "min_number": 1,
        }
    },
    {
        "NAME": "user.validations.SpecialCharacterValidator",
        "OPTIONS": {
            "min_number": 1,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Singapore'
USE_TZ = True
USE_I18N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user authentication model
AUTH_USER_MODEL = "user.User"
AUTHENTICATION_BACKENDS = ['user.authentication.UserAuth'] #'django.contrib.auth.backends.ModelBackend'

# Throttling
sensitive_request_throttle_rate = "7/minute" if not DEBUG else "100000/second"
non_sensitive_request_throttle_rate = "20/minute" if not DEBUG else "100000/second"
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication', ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": sensitive_request_throttle_rate, # per IP address, for unauthenticated requests (all registration and login requests)
        "sensitive_request": sensitive_request_throttle_rate, # per authenticated user, for deposit, withdraw, transfer, approve, reject
        "non_sensitive_request": non_sensitive_request_throttle_rate, # per authenticated user, for get_account_types, apply, get_tickets, balance, get_open_tickets, get_closed_tickets, ticket_details 
    },
}

# Knox Authentication Module
REST_KNOX = {
    'SECURE_HASH_ALGORITHM':'cryptography.hazmat.primitives.hashes.SHA512',
    'AUTH_TOKEN_CHARACTER_LENGTH': 64, # By default, it is set to 64 characters (this shouldn't need changing).
    'TOKEN_TTL': timedelta(minutes=15), # The default is 10 hours i.e., timedelta(hours=10)).
    'USER_SERIALIZER': 'knox.serializers.UserSerializer',
    'TOKEN_LIMIT_PER_USER': None if DEBUG else 1, # By default, this option is disabled and set to None -- thus no limit.
    'AUTO_REFRESH': True, # This defines if the token expiry time is extended by TOKEN_TTL each time the token is used.
    'MIN_REFRESH_INTERVAL': 60, # This is the minimum time in seconds that needs to pass for the token expiry to be updated in the database.
    'EXPIRY_DATETIME_FORMAT': api_settings.DATETIME_FORMAT,
}

